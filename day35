//Q69: Find the second largest element in an array.

/*
Sample Test Cases:
Input 1:
5
10 20 30 40 50
Output 1:
40

*/

#include <stdio.h>

int main() {
    int n, i, largest, second_largest;

    // Input size of array
    scanf("%d", &n);

    int arr[n];

    // Input array elements
    for(i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Initialize largest and second largest
    if(arr[0] > arr[1]) {
        largest = arr[0];
        second_largest = arr[1];
    } else {
        largest = arr[1];
        second_largest = arr[0];
    }

    // Find the second largest
    for(i = 2; i < n; i++) {
        if(arr[i] > largest) {
            second_largest = largest;
            largest = arr[i];
        } else if(arr[i] > second_largest && arr[i] != largest) {
            second_largest = arr[i];
        }
    }

    // Output the second largest element
    printf("%d", second_largest);

    return 0;
}


//Q70: Rotate an array to the right by k positions.

/*
Sample Test Cases:
Input 1:
5
1 2 3 4 5
2
Output 1:
4 5 1 2 3

*/

#include <stdio.h>

int main() {
    int n, k, i;

    // Input size of array
    scanf("%d", &n);

    int arr[n], result[n];

    // Input array elements
    for(i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Input number of rotations
    scanf("%d", &k);

    // Normalize k in case it's greater than n
    k = k % n;

    // Rotate to the right by k positions
    for(i = 0; i < n; i++) {
        result[(i + k) % n] = arr[i];
    }

    // Output the result array
    for(i = 0; i < n; i++) {
        printf("%d ", result[i]);
    }

    return 0;
}
